openapi: 3.0.0
info:
  title: Project Management App
  description: API for managing projects
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: LocalHost development server
  - url: https://projectmanager-iqvd.onrender.com
    description: Live server
components:
  securitySchemes:
    Bearer:
      type: apiKey
      in: header
      name: Authorization
      description: "JWT Authorization header using the Bearer scheme. Login using: 'Bearer {your_data_token}'"

  schemas:
    User:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        _id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        firstName: "John"
        lastName: "Doe"
        email: "john.doe@example.com"
        password: "securepassword123"

    ProjectMember:
      type: object
      required:
        - user
        - role
      properties:
        user:
          type: string
          format: uuid
        role:
          type: string
      example:
        user: "123e4567-e89b-12d3-a456-426614174000"
        role: "owner"

    Project:
      type: object
      required:
        - name
        - description
        - status
        - owner
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: string
          default: "active"
        owner:
          type: string
          format: uuid
        members:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMember'
      example:
        name: "New Software Development"
        description: "Project to develop a new software application"
        status: "active"
        owner: "123e4567-e89b-12d3-a456-426614174000"
        members:
          - user: "123e4567-e89b-12d3-a456-426614174000"
            role: "owner"
      
    Task:
      type: object
      required:
        - name
        - description
        - status
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: string
          default: "pending"
        project:
          type: string
          format: uuid
        assignedTo:
          type: string
          format: uuid
        assignedBy:
          type: string
          format: uuid
        attachments:
          type: array
          items:
            type: string
      example:
        name: "Frontend Development"
        description: "Develop the new UI for the customer dashboard"
        status: "active"
        project: "123e4567-e89b-12d3-a456-426614174000"
        assignedTo: "66438773389800762ffc1b71"
        assignedBy: "66438773389800762ffc1b71"
        attachments: []

    Notification:
      type: object
      required:
        - user
        - title
        - description
        - onClick
      properties:
        user:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        onClick:
          type: string
        read:
          type: boolean
          default: false
      example:
        user: "66438773389800762ffc1b71"
        title: "New Task Assigned"
        description: "You have been assigned a new task"
        onClick: "/tasks/123"
        read: false

paths:
  /api/users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User registered successfully
        '500':
          description: Error registering user

  /api/users/login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
        '400':
          description: Invalid login credentials

  /api/users/me:
    get:
      summary: Get logged in user details
      tags:
        - Users
      security:
        - Bearer: []
      responses:
        '200':
          description: User details fetched successfully
        '401':
          description: Authorization information is missing or invalid
        '500':
          description: Error fetching user details


  /api/projects/create-project:
    post:
      summary: Create a new project
      tags:
        - Projects
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project created successfully
        '500':
          description: Error creating project

  /api/projects/get-all-projects:
    post:
      summary: Retrieve all projects for the logged-in user
      tags:
        - Projects
      security:
        - Bearer: []
      responses:
        '200':
          description: Projects retrieved successfully
        '500':
          description: Error retrieving projects

  /api/projects/get-project-by-id:
    post:
      summary: Retrieve a project by its ID
      tags:
        - Projects
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  description: The unique identifier of the project to retrieve
      responses:
        '200':
          description: Project fetched successfully
        '404':
          description: Project not found
        '500':
          description: Error fetching project

  /api/projects/get-projects-by-role:
    post:
      summary: Retrieve projects by the user's role within them
      tags:
        - Projects
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The unique identifier of the user whose projects are to be fetched
      responses:
        '200':
          description: Projects fetched successfully
        '500':
          description: Error fetching projects

  /api/projects/edit-project:
    post:
      summary: Edit an existing project
      tags:
        - Projects
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
              description: Data to be updated for the project
              properties:
                _id:
                  type: string
                  description: The unique identifier of the project to update
      responses:
        '200':
          description: Project updated successfully
        '404':
          description: Project not found
        '500':
          description: Error updating project

  /api/projects/delete-project:
    post:
      summary: Delete a project by ID
      tags:
        - Projects
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  description: The unique identifier of the project to delete
      responses:
        '200':
          description: Project deleted successfully
        '404':
          description: Project not found
        '500':
          description: Error deleting project

  /api/projects/add-member:
    post:
      summary: Add a member to a project
      tags:
        - Projects
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the user to be added as a member
                role:
                  type: string
                  description: Role of the user within the project
                projectId:
                  type: string
                  description: The unique identifier of the project to which the member is to be added
      responses:
        '200':
          description: Member added successfully
        '500':
          description: Error adding member

  /api/projects/remove-member:
    post:
      summary: Remove a member from a project
      tags:
        - Projects
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memberId:
                  type: string
                  description: The unique identifier of the member to remove
                projectId:
                  type: string
                  description: The unique identifier of the project from which the member is to be removed
      responses:
        '200':
          description: Member removed successfully
        '404':
          description: Project or member not found
        '500':
          description: Error removing member


  /api/tasks/create-task:
    post:
      summary: Create a new task
      tags:
        - Tasks
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task created successfully
        '500':
          description: Error creating task

  /api/tasks/get-all-tasks:
    post:
      summary: Retrieve all tasks based on dynamic filters
      tags:
        - Tasks
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: Filter tasks by their status
      responses:
        '200':
          description: Tasks retrieved successfully
        '500':
          description: Error retrieving tasks

  /api/tasks/update-task:
    post:
      summary: Update a specific task
      tags:
        - Tasks
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  description: Unique identifier of the task to update
                name:
                  type: string
                description:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: Task updated successfully
        '500':
          description: Error updating task

  /api/tasks/delete-task:
    post:
      summary: Delete a specific task
      tags:
        - Tasks
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  description: Unique identifier of the task to delete
      responses:
        '200':
          description: Task deleted successfully
        '500':
          description: Error deleting task

  /api/tasks/upload-image:
    post:
      summary: Upload an image related to a task
      tags:
        - Tasks
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file to upload associated with the task
                taskId:
                  type: string
                  description: Unique identifier of the task to associate the image with
      responses:
        '200':
          description: Image uploaded successfully
        '400':
          description: No file uploaded
        '500':
          description: Error uploading image


  /api/notifications/add-notification:
    post:
      summary: Add a new notification
      tags:
        - Notifications
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: Notification added successfully
        '500':
          description: Error adding notification

  /api/notifications/get-all-notifications:
    get:
      summary: Retrieve all notifications for a specific user
      tags:
        - Notifications
      security:
        - Bearer: []
      responses:
        '200':
          description: Notifications fetched successfully
        '500':
          description: Error fetching notifications

  /api/notifications/mark-as-read:
    post:
      summary: Mark all notifications as read for a specific user
      tags:
        - Notifications
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The unique identifier of the user whose notifications are to be marked as read
      responses:
        '200':
          description: Notifications marked as read successfully
        '500':
          description: Error marking notifications as read

  /api/notifications/delete-all-notifications:
    delete:
      summary: Delete all notifications for a specific user
      tags:
        - Notifications
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The unique identifier of the user whose notifications are to be deleted
      responses:
        '200':
          description: All notifications deleted successfully
        '500':
          description: Error deleting notifications


    

